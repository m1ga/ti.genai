/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.genai;

import android.annotation.SuppressLint;
import android.os.Build;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.camera.core.impl.utils.futures.FutureCallback;
import androidx.camera.core.impl.utils.futures.Futures;

import com.google.common.util.concurrent.ListenableFuture;
import com.google.mlkit.genai.common.DownloadCallback;
import com.google.mlkit.genai.common.FeatureStatus;
import com.google.mlkit.genai.common.GenAiException;
import com.google.mlkit.genai.proofreading.Proofreader;
import com.google.mlkit.genai.proofreading.ProofreaderOptions;
import com.google.mlkit.genai.proofreading.Proofreading;
import com.google.mlkit.genai.proofreading.ProofreadingRequest;
import com.google.mlkit.genai.rewriting.Rewriter;
import com.google.mlkit.genai.rewriting.RewriterOptions;
import com.google.mlkit.genai.rewriting.Rewriting;
import com.google.mlkit.genai.rewriting.RewritingRequest;
import com.google.mlkit.genai.summarization.Summarization;
import com.google.mlkit.genai.summarization.SummarizationRequest;
import com.google.mlkit.genai.summarization.Summarizer;
import com.google.mlkit.genai.summarization.SummarizerOptions;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;


@Kroll.module(name = "TiGenai", id = "ti.genai")
public class TiGenaiModule extends KrollModule {

    @Kroll.constant
    static final int ELABORATE = RewriterOptions.OutputType.ELABORATE;
    @Kroll.constant
    static final int PROFESSIONAL = RewriterOptions.OutputType.PROFESSIONAL;
    @Kroll.constant
    static final int SHORTEN = RewriterOptions.OutputType.SHORTEN;
    @Kroll.constant
    static final int FRIENDLY = RewriterOptions.OutputType.FRIENDLY;
    @Kroll.constant
    static final int EMOJIFY = RewriterOptions.OutputType.EMOJIFY;
    @Kroll.constant
    static final int REPHRASE = RewriterOptions.OutputType.REPHRASE;

    @Kroll.constant
    static final int ONE_BULLET = SummarizerOptions.OutputType.ONE_BULLET;
    @Kroll.constant
    static final int TWO_BULLETS = SummarizerOptions.OutputType.TWO_BULLETS;
    @Kroll.constant
    static final int THREE_BULLETS = SummarizerOptions.OutputType.THREE_BULLETS;

    @Kroll.constant
    static final int ARTICLE = SummarizerOptions.InputType.ARTICLE;
    @Kroll.constant
    static final int CONVERSATION = SummarizerOptions.InputType.CONVERSATION;


    private static final String LCAT = "TiGenaiModule";
    Proofreader proofreader;
    Rewriter rewriter;
    Summarizer summarizer;

    public TiGenaiModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    // Methods
    @RequiresApi(api = Build.VERSION_CODES.P)
    @Kroll.method
    public void proofread(KrollDict kd) {
        String textToProofread = kd.getString("text");

        ProofreaderOptions proofreaderOptions =
                ProofreaderOptions
                        .builder(TiApplication.getAppRootOrCurrentActivity())
                        .setInputType(ProofreaderOptions.InputType.KEYBOARD)
                        .setLanguage(ProofreaderOptions.Language.ENGLISH)
                        .build();
        proofreader = Proofreading.getClient(proofreaderOptions);
        prepareAndStartProofread(textToProofread);
    }

    @RequiresApi(api = Build.VERSION_CODES.P)
    @Kroll.method
    public void summarize(KrollDict kd) {
        String textToProofread = kd.getString("text");
        int outputType = SummarizerOptions.OutputType.ONE_BULLET;
        int inputType = SummarizerOptions.InputType.ARTICLE;
        if (kd.containsKeyAndNotNull("outputType")) {
            outputType = kd.getInt("outputType");
        }

        SummarizerOptions summarizerOptions =
                SummarizerOptions.builder(TiApplication.getAppRootOrCurrentActivity())
                        .setOutputType(outputType)
                        .setInputType(inputType)
                        .setLanguage(SummarizerOptions.Language.ENGLISH)
                        .build();
        summarizer = Summarization.getClient(summarizerOptions);
        prepareAndStartSummarization(textToProofread);
    }

    @RequiresApi(api = Build.VERSION_CODES.P)
    @Kroll.method
    public void rewrite(KrollDict kd) {
        String textToProofread = kd.getString("text");
        int outputType = RewriterOptions.OutputType.ELABORATE;
        if (kd.containsKeyAndNotNull("outputType")) {
            outputType = kd.getInt("outputType");
        }

        RewriterOptions rewriterOptions =
                RewriterOptions.builder(TiApplication.getAppRootOrCurrentActivity())
                        .setOutputType(outputType)
                        .setLanguage(RewriterOptions.Language.ENGLISH)
                        .build();
        rewriter = Rewriting.getClient(rewriterOptions);
        prepareAndStartRewrite(textToProofread);
    }

    @SuppressLint("RestrictedApi")
    @RequiresApi(api = Build.VERSION_CODES.P)
    public void prepareAndStartProofread(String textToProofread) {
        ListenableFuture<Integer> future = proofreader.checkFeatureStatus();

        Futures.addCallback(
                future,
                new FutureCallback<Integer>() {
                    public void onSuccess(Integer featureStatus) {
                        KrollDict kd = new KrollDict();
                        if (featureStatus == FeatureStatus.DOWNLOADABLE) {
                            proofreader.downloadFeature(new DownloadCallback() {
                                @Override
                                public void onDownloadStarted(long bytesToDownload) {
                                    kd.put("status", "download started");
                                    fireEvent("status", kd);
                                }

                                @Override
                                public void onDownloadFailed(GenAiException e) {
                                    kd.put("status", "download failed");
                                    fireEvent("status", kd);
                                }

                                @Override
                                public void onDownloadProgress(long totalBytesDownloaded) {
                                }

                                @Override
                                public void onDownloadCompleted() {
                                    kd.put("status", "download complete");
                                    fireEvent("status", kd);
                                    startProofreadingRequest(textToProofread, proofreader);
                                }
                            });
                        } else if (featureStatus == FeatureStatus.DOWNLOADING) {
                            startProofreadingRequest(textToProofread, proofreader);
                        } else if (featureStatus == FeatureStatus.AVAILABLE) {
                            startProofreadingRequest(textToProofread, proofreader);
                        }
                    }

                    public void onFailure(@NonNull Throwable thrown) {
                        Log.e(LCAT, thrown.getMessage());
                    }
                },
                TiApplication.getAppRootOrCurrentActivity().getMainExecutor()
        );

    }

    @SuppressLint("RestrictedApi")
    @RequiresApi(api = Build.VERSION_CODES.P)
    public void prepareAndStartRewrite(String textToProofread) {
        ListenableFuture<Integer> future = rewriter.checkFeatureStatus();

        Futures.addCallback(
                future,
                new FutureCallback<Integer>() {
                    public void onSuccess(Integer featureStatus) {
                        KrollDict kd = new KrollDict();
                        if (featureStatus == FeatureStatus.DOWNLOADABLE) {
                            rewriter.downloadFeature(new DownloadCallback() {
                                @Override
                                public void onDownloadStarted(long bytesToDownload) {
                                    kd.put("status", "download started");
                                    fireEvent("status", kd);
                                }

                                @Override
                                public void onDownloadFailed(GenAiException e) {
                                    kd.put("status", "download failed");
                                    fireEvent("status", kd);
                                }

                                @Override
                                public void onDownloadProgress(long totalBytesDownloaded) {
                                }

                                @Override
                                public void onDownloadCompleted() {
                                    kd.put("status", "download complete");
                                    fireEvent("status", kd);
                                    startRewritingRequest(textToProofread, rewriter);
                                }
                            });
                        } else if (featureStatus == FeatureStatus.DOWNLOADING) {
                            startRewritingRequest(textToProofread, rewriter);
                        } else if (featureStatus == FeatureStatus.AVAILABLE) {
                            startRewritingRequest(textToProofread, rewriter);
                        }
                    }

                    public void onFailure(@NonNull Throwable thrown) {
                        Log.e(LCAT, thrown.getMessage());
                    }
                },
                TiApplication.getAppRootOrCurrentActivity().getMainExecutor()
        );

    }

    @SuppressLint("RestrictedApi")
    @RequiresApi(api = Build.VERSION_CODES.P)
    public void prepareAndStartSummarization(String textToProofread) {
        ListenableFuture<Integer> future = summarizer.checkFeatureStatus();

        Futures.addCallback(
                future,
                new FutureCallback<Integer>() {
                    public void onSuccess(Integer featureStatus) {
                        KrollDict kd = new KrollDict();
                        if (featureStatus == FeatureStatus.DOWNLOADABLE) {
                            summarizer.downloadFeature(new DownloadCallback() {
                                @Override
                                public void onDownloadStarted(long bytesToDownload) {
                                    kd.put("status", "download started");
                                    fireEvent("status", kd);
                                }

                                @Override
                                public void onDownloadFailed(GenAiException e) {
                                    kd.put("status", "download failed");
                                    fireEvent("status", kd);
                                }

                                @Override
                                public void onDownloadProgress(long totalBytesDownloaded) {
                                }

                                @Override
                                public void onDownloadCompleted() {
                                    kd.put("status", "download complete");
                                    fireEvent("status", kd);
                                    startSummarizationRequest(textToProofread, summarizer);
                                }
                            });
                        } else if (featureStatus == FeatureStatus.DOWNLOADING) {
                            startSummarizationRequest(textToProofread, summarizer);
                        } else if (featureStatus == FeatureStatus.AVAILABLE) {
                            startSummarizationRequest(textToProofread, summarizer);
                        }
                    }

                    public void onFailure(@NonNull Throwable thrown) {
                        Log.e(LCAT, thrown.getMessage());
                    }
                },
                TiApplication.getAppRootOrCurrentActivity().getMainExecutor()
        );

    }

    void startProofreadingRequest(String text, Proofreader resultObj) {
        ProofreadingRequest proofreadingRequest = ProofreadingRequest
                .builder(text).build();

        resultObj.runInference(proofreadingRequest, newText -> {
            KrollDict kd = new KrollDict();
            kd.put("text", newText);
            fireEvent("streamResult", kd);
        });
    }

    void startRewritingRequest(String text, Rewriter resultObj) {
        RewritingRequest proofreadingRequest = RewritingRequest.builder(text).build();

        resultObj.runInference(proofreadingRequest, newText -> {
            KrollDict kd = new KrollDict();
            kd.put("text", newText);
            fireEvent("streamResult", kd);
        });
    }

    @SuppressLint("RestrictedApi")
    void startSummarizationRequest(String text, Summarizer resultObj) {
        SummarizationRequest proofreadingRequest = SummarizationRequest.builder(text).build();

        resultObj.runInference(proofreadingRequest, newText -> {
            KrollDict kd = new KrollDict();
            kd.put("text", newText);
            fireEvent("streamResult", kd);
        });
    }

}

